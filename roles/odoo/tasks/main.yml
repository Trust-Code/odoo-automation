---
  - name: Check the odoo postgres user has the same password
    become: yes
    become_user: postgres
    postgresql_user:
      name: "{{ pg_user }}"
      password: "{{ pg_password }}"
      role_attr_flags: CREATEDB,NOSUPERUSER
      state: present
      port: "{{ pg_port }}"
      encrypted: yes
    when: pg_host == "localhost"

  - name: Create DB (if necessary)
    become: yes
    become_user: postgres
    postgresql_db:
        name: "{{ item }}"
        owner: "{{ pg_user }}"
        state: present
        template: "template0"
        port: "{{ pg_port }}"
    register: dbstatus
    with_items: "{{ databases }}"
    when: pg_host == "localhost"

  - name: Atualiza a imagem do Odoo
    become: yes
    become_user: odoo
    docker_image:
      name: trustcode/docker-odoo:{{ item.value.versao }}
      force: yes
    with_dict: "{{ docker }}"

  - name: Deleta o docker odoo de update
    become: yes
    become_user: odoo
    docker_container:
      name: "trustcode-update-odoo-{{ item }}"
      state: absent
    with_items: "{{ databases }}"

  - name: Cria a pasta dados
    become: yes
    become_user: root
    file: path=/opt/dados/{{ item.key }} state=directory mode=0755 owner=odoo
    with_dict: "{{ docker }}"

  - name: Deleta pasta odoo enterprise
    become: yes
    become_user: odoo
    file: path=~/tmp/odoo-enterprise state=directory state=absent

  - name: Deleta pasta trustcode enterprise
    become: yes
    become_user: odoo
    file: path=~/tmp/trustcode-enterprise state=directory state=absent

  - name: Deleta pasta odoo-reports
    become: yes
    become_user: odoo
    file: path=~/tmp/odoo-reports state=directory state=absent

  - name: Realizando o download da versão odoo enterprise
    become: yes
    become_user: odoo
    git:
      accept_hostkey: True
      repo: git@github.com:Trust-Code/enterprise.git
      dest: ~/tmp/odoo-enterprise/{{ item.value.versao }}/
      version: "{{ item.value.versao }}"
      key_file: /home/odoo/.ssh/id_rsa
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Realizando o download da versão trustcode enterprise
    become: yes
    become_user: odoo
    git:
      accept_hostkey: True
      repo: git@bitbucket.org:trustcode/trustcode-enterprise.git
      dest: ~/tmp/trustcode-enterprise/{{ item.value.versao }}/
      version: "{{ item.value.versao }}"
      key_file: /home/odoo/.ssh/id_rsa
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Realizando o download da versão odoo reports
    become: yes
    become_user: odoo
    git:
      accept_hostkey: True
      repo: git@bitbucket.org:trustcode/odoo-reports.git
      dest: ~/tmp/odoo-reports/{{ item.value.versao }}/
      version: "{{ item.value.versao }}"
      key_file: /home/odoo/.ssh/id_rsa
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Deleta pasta odoo enterprise
    become: yes
    become_user: odoo
    file: path=~/tmp/odoo-enterprise/{{ item.value.versao }}/.git state=directory state=absent
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Deleta pasta trustcode enterprise
    become: yes
    become_user: odoo
    file: path=~/tmp/trustcode-enterprise/{{ item.value.versao }}/.git state=directory state=absent
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Deleta pasta odoo-reports
    become: yes
    become_user: odoo
    file: path=~/tmp/odoo-reports/{{ item.value.versao }}/.git state=directory state=absent
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Cria a pasta dados
    become: yes
    become_user: root
    file: path=/opt/dados/{{ item.key }}/addons/{{ item.value.versao }} state=directory mode=0755 owner=odoo
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Copia a versão odoo enterprise
    become: yes
    become_user: odoo
    command: cp -a ~/tmp/odoo-enterprise/{{ item.value.versao }}/. /opt/dados/{{ item.key }}/addons/{{ item.value.versao }}/
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Copia a versão trustcode enterprise
    become: yes
    become_user: odoo
    command: cp -a ~/tmp/trustcode-enterprise/{{ item.value.versao }}/. /opt/dados/{{ item.key }}/addons/{{ item.value.versao }}/
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Copia a versão odoo reports
    become: yes
    become_user: odoo
    command: cp -a ~/tmp/odoo-reports/{{ item.value.versao }}/. /opt/dados/{{ item.key }}/addons/{{ item.value.versao }}/
    with_dict: "{{ docker }}"
    when: item.value.versao in (10.0, )

  - name: Inicia o docker odoo e inicializa a base de dados
    become: yes
    become_user: odoo
    command: "docker run --name trustcode-update-odoo-{{ item.key }} --net host -v /opt/dados/{{ item.value.docker.name }}:/opt/dados trustcode/docker-odoo:{{ item.value.docker.versao }} /usr/bin/odoo-server -c /etc/odoo/odoo.conf -d {{ item.key }} -i br_base -r {{ pg_user }} --db_port {{ pg_port }} --db_host {{ pg_host }}  -w {{ pg_password }} --without-demo=all --stop-after-init"
    when: dbstatus.changed
    with_dict: "{{ databases }}"

  - name: Inicia o docker odoo em modo atualizacao
    become: yes
    become_user: odoo
    command: "docker run --name trustcode-update-odoo-{{ item.key }} --net host -v /opt/dados/{{ item.value.docker.name }}:/opt/dados trustcode/docker-odoo:{{ item.value.docker.versao }} /usr/bin/odoo-server -c /etc/odoo/odoo.conf -d {{ item.key }} -u {{ module_update }} -r {{ pg_user }} --db_port {{ pg_port }} --db_host {{ pg_host }} -w {{ pg_password }} --without-demo=all --stop-after-init"
    when: module_update != "" and not dbstatus.changed
    with_dict: "{{ databases }}"

  - name: Recria o docker odoo
    become: yes
    become_user: odoo
    docker_container:
      name: trustcode-odoo-{{ item.key }}
      image: trustcode/docker-odoo:{{ item.value.versao }}
      network_mode: host
      restart: yes
      state: started
      recreate: yes
      volumes:
        - "/opt/dados/{{ item.key }}:/opt/dados"
        - "/home/odoo/.ssh:/home/temp/.ssh"
      env:
        PG_HOST: "{{ pg_host }}"
        PG_PORT: "{{ pg_port }}"
        PG_USER: "{{ pg_user }}"
        PG_PASSWORD: "{{ pg_password }}"
        ODOO_PASSWORD: "{{ item.value.admin_password }}"
        PORT: "{{ item.value.porta }}"
        LONGPOLLING_PORT: "{{ item.value.porta_polling }}"
        WORKERS: "{{ workers }}"
        ODOO_VERSION: "{{ item.value.versao }}"
        ODOO_ENTERPRISE: "{{ '1' if item.value.enterprise else 0 }}"
        TRUSTCODE_ENTERPRISE: 1
    with_dict: "{{ docker }}"

  - name: Modifica a senha padrão
    become: yes
    become_user: odoo
    command: "docker exec -u root trustcode-odoo-{{ item.key }} sed -i 's/senha_admin/{{ item.value.admin_password }}/' /etc/odoo/odoo.conf"
    when: inventory_hostname in groups['producao'] and item.value.versao in (10.0,)
    with_dict: "{{ docker }}"

  - name: Adicionando dbfilter ao arquivo de configuração
    become: yes
    become_user: odoo
    command: docker exec -u root trustcode-odoo-{{ item.key }} bash -c "echo 'dbfilter = ^%d' >> /etc/odoo/odoo.conf"
    when: inventory_hostname in groups['trustcode']
    with_dict: "{{ docker }}"

  - name: Reinicia o odoo via supervisor para pegar nova senha
    become: yes
    become_user: odoo
    command: "docker exec trustcode-odoo-{{ item.key }} supervisorctl restart odoo"
    when: inventory_hostname in groups['producao']
    with_dict: "{{ docker }}"

  - name: Nginx | Criar configuracao
    template:
      src: "nginx-ssl-pre.j2"
      dest: "/etc/nginx/sites-available/{{ item.key }}"
      owner: root
      group: root
      mode: 0755
    with_dict: "{{ databases }}"
    when: inventory_hostname in groups['producao']

  - name: Nginx | Link para habilitar o site
    file:
      src: "/etc/nginx/sites-available/{{ item.key }}"
      dest: "/etc/nginx/sites-enabled/{{ item.key }}"
      state: link
    with_dict: "{{ databases }}"
    when: inventory_hostname in groups['producao']

  - name: Certbot - Cria certificados
    become: yes
    become_user: root
    command: "certbot certonly --authenticator standalone --installer nginx -n --expand --agree-tos --email secure@trustcode.com.br --redirect -d {{ ','.join(item.value.domain) }} --pre-hook 'service nginx stop' --post-hook 'service nginx start'"
    when: inventory_hostname in groups['producao'] and inventory_hostname not in groups['ssloff']
    with_dict: "{{ databases }}"

  - name: Nginx | Criar configuracao
    template:
      src: "nginx-ssl-pos.j2"
      dest: "/etc/nginx/sites-available/{{ item.key }}"
      owner: root
      group: root
      mode: 0755
    with_dict: "{{ databases }}"
    when: inventory_hostname in groups['producao'] and inventory_hostname not in groups['ssloff']

  - name: Nginx | Assegurar que Nginx esta instalado (package)
    service:
      name: nginx
      state: restarted
    when: inventory_hostname in groups['producao']
